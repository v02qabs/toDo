import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.*;
import java.io.*;
import java.time.*;
import java.time.format.*;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

class MainActivity extends JFrame {
    private JPanel calendarPanel;
    private JLabel monthLabel;
    private Calendar calendar;
    private List<String> lines = new ArrayList<>(); // CSVファイルの内容を保持

    public static void main(String[] args) {
        new MainActivity();
    }

    private String getSelectedDate(int day) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/");
        return sdf.format(calendar.getTime()) + String.format("%02d", day);
    }

    private void showAppointments(int day) {
        String selectedDate = getSelectedDate(day);

        JFrame edit_schedule = new JFrame("day: " + day);
        edit_schedule.setLayout(null);

        area = new JTextArea();
        area.setBounds(0, 0, 300, 400);
        edit_schedule.add(area);

        comboBox = new JComboBox<>(time);
        comboBox.setBounds(400, 0, 100, 30);
        edit_schedule.add(comboBox);

        JButton saveButton = new JButton("Save");
        saveButton.setBounds(0, 410, 100, 30);
        edit_schedule.add(saveButton);
        saveButton.addActionListener(e -> saveSchedule(day));

        edit_schedule.setBounds(0, 0, 500, 500);

        loadScheduleToEdit(selectedDate); // 既存の予定をロード
        edit_schedule.setVisible(true);
    }

    public String[] time = {"00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00",
            "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00",
            "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00"};

    public MainActivity() {
        setLayout(new BorderLayout());
        setBounds(100, 100, 400, 400);
        setTitle("Schedule Manager");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        calendar = Calendar.getInstance();

        JPanel topPanel = new JPanel();
        JButton prevButton = new JButton("Previous");
        JButton nextButton = new JButton("Next");
        monthLabel = new JLabel(getCurrentMonth(), JLabel.CENTER);

        prevButton.addActionListener(e -> changeMonth(-1));
        nextButton.addActionListener(e -> changeMonth(1));

        topPanel.add(prevButton);
        topPanel.add(monthLabel);
        topPanel.add(nextButton);

        add(topPanel, BorderLayout.NORTH);

        calendarPanel = new JPanel(new GridLayout(0, 7));
        updateCalendar();
        add(calendarPanel, BorderLayout.CENTER);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowActivated(WindowEvent e) {
                openning();
            }
        });

        setVisible(true);
    }

    private String getCurrentMonth() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
        return sdf.format(calendar.getTime());
    }

    private Set<String> scheduledDays = new HashSet<>();

    private void changeMonth(int delta) {
        calendar.add(Calendar.MONTH, delta);
        monthLabel.setText(getCurrentMonth());
        updateCalendar();
    }

    private void updateCalendar() {
        loadScheduledDays();
        calendarPanel.removeAll();
        Calendar tempCal = (Calendar) calendar.clone();
        tempCal.set(Calendar.DAY_OF_MONTH, 1);
        int firstDayOfWeek = tempCal.get(Calendar.DAY_OF_WEEK) - 1;
        int daysInMonth = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);

        for (int i = 0; i < firstDayOfWeek; i++) {
            calendarPanel.add(new JLabel(""));
        }

        for (int day = 1; day <= daysInMonth; day++) {
            String displayText = String.valueOf(day);
            if (scheduledDays.contains(String.valueOf(day))) {
                displayText = "<E>";  // ←予定ありマーク
            }

            JButton dayButton = new JButton(displayText);
            int selectedDay = day;
            dayButton.addActionListener(e -> showAppointments(selectedDay));
            calendarPanel.add(dayButton);
        }

        calendarPanel.revalidate();
        calendarPanel.repaint();
    }

    public void openning() {
        scheduledDays.clear();
        lines.clear(); // リストをクリア
        try (BufferedReader br = new BufferedReader(new FileReader("todo.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("date")) continue; // ヘッダー行をスキップ
                lines.add(line); // 全ての行をリストに保持

                String[] parts = line.split(",");
                if (parts.length < 1) continue;

                String dateTime = parts[0];  // 例: 2025/04/19_15:00

                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/MM/dd_HH:mm");
                    LocalDate date = LocalDate.parse(dateTime, formatter);
                    int day = date.getDayOfMonth();
                    scheduledDays.add(String.valueOf(day)); // 例: "19"
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void selected_date(String date, String contents) {
        System.out.println("date: " + date);
        if (date != null) {
            System.out.println(date + " : " + contents);
            for (Component comp : calendarPanel.getComponents()) {
                if (comp instanceof JButton) {
                    JButton button = (JButton) comp;
                    if (button.getText().equals(date)) {
                        button.setText("E");
                        break;
                    }
                }
            }
        }
    }

    public void saveSchedule(int day) {
        String selectedDate = getSelectedDate(day);
        String selectedTime = (String) comboBox.getSelectedItem();
        String newSchedule = selectedDate + "_" + selectedTime + "," + area.getText();

        boolean updated = false;
        for (int i = 0; i < lines.size(); i++) {
            if (lines.get(i).startsWith(selectedDate + "_")) { // 日付_で始まる行を検索
                lines.set(i, newSchedule); // 上書き
                updated = true;
                break;
            }
        }
        if (!updated) {
            lines.add(newSchedule); // 新規追加
        }

        // CSVファイルに書き戻し
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("todo.csv"))) {
            bw.write("date,contents\n"); // ヘッダー
            for (String line : lines) {
                if (!line.startsWith("date,")) { // ヘッダー以外を書き込む
                    bw.write(line + "\n");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        loadScheduledDays();
        updateCalendar();
        openning();
    }

    private void loadScheduledDays() {
        scheduledDays.clear();
        try (BufferedReader br = new BufferedReader(new FileReader("todo.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("date,")) continue;

                String[] parts = line.split(",");
                if (parts.length < 2) continue;

                String datePart = parts[0]; // 例: "2025/04/20_10:00"
                String dayStr = datePart.substring(8, 10); // "20"
                if (dayStr.startsWith("0")) dayStr = dayStr.substring(1); // "01" -> "1"
                scheduledDays.add(dayStr);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void loadScheduleToEdit(String selectedDate) {
        area.setText(""); // クリア
        try (BufferedReader br = new BufferedReader(new FileReader("todo.csv"))) {
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith("date,")) {
                    continue;
                }
                if (line.startsWith(selectedDate + "_")) { // 選択された日付で始まる行を検索
                    String[] parts = line.split(",");
                    if (parts.length > 1) {
                        area.setText(parts[1]);
                        comboBox.setSelectedItem(line.substring(11, 16));
                    }
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public JTextArea area;
    JComboBox<String> comboBox;
}
